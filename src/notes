// Below are previous versions of the makeText() and makeChains() functions from markov.js file.
// Storing these for educational purposes.

// v2 of makeText()
// makeText(numWords = 100) {

//   /* PEER:
//     I ended up refactoring makeText() to use array+push rather than tring concatenation.
//     Is it true that use an array + push rather than string concatenation
//     when dealing with a larger number of concatenations, especially within loops?
//     I understand that repeated string concatenation can lead to poor performance
//     since strings are immutable in JS. Thus, each concatenation requires a new string to be created,
//     which can lead to significant memory overhead and slower execution.

//     More on memory from Chat OpenAI:
//     "The problem with repeated string concatenation is that it generates
//     a large number of intermediate string objects in memory, which can result
//     in increased memory usage. These intermediate string objects may become
//     eligible for garbage collection eventually, but it's not guaranteed
//     to happen immediately. Until they are garbage collected, they consume memory...
//     ...Using an array to store parts and then joining them with join()
//     can help mitigate this issue because it minimizes the creation of
//     intermediate string objects, resulting in more efficient memory usage
//     and better performance."
//  */

//   const randomText = [];
//   let newWord = true;

//   while (randomText.length < numWords) {
//     // Use randomKey to get randomValue from chainMap
//     let randomIndex = this.createRandomNumber(0, this.chainMap.size);
//     let randomKey = [...this.chainMap.keys()][randomIndex];

//     if (newWord) {
//       randomText.push(randomKey);
//     } else {
//       let randomValue =
//         this.chainMap.get(randomKey)[
//           this.createRandomNumber(0, this.chainMap.get(randomKey).length)
//         ];
//       if (randomValue !== null) {
//         randomText.push(randomValue);
//       }
//       // If a null value was picked, we've reached the end of the chain,
//       // so stop and return the current randomText as is.
//       if (randomValue === null) {
//         //PEER Is there a more conventional way to return an error to a the caller?
//         return { errorNullValue: randomText.slice(0, numWords).join(" ") };
//       }
//     }
//     newWord = !newWord;
//   }
//   return randomText.slice(0, numWords).join(" ");
// }

// v1 of makeText()
// makeText(numWords = 100) {
//   let randomText = "";
//   /* PEER:
//     Decided to add a second 'randomText.split(" ").length < numWords' check
//     within this while-loop. While this may be redundant, it allows for the while-loop
//     to append 2 new words at a time WHILE ensuring the length doesn't exceed numWords.

//     One alternative would've been for the while-loop to add only 1 word at a time,
//     but this would've resulted in more while loops.

//     Perhaps there was a better way?
//   */

//   while (randomText.split(" ").length < numWords) {
//     // get a random word for the initial word
//     const randomIndex = this.createRandomNumber(0, this.chainMap.size);
//     let randomKey = [...this.chainMap.keys()][randomIndex];

//     // append random key
//     if (randomText === "") {
//       randomText += randomKey;
//     } else {
//       randomText += " " + randomKey;
//     }

//     // Use randomKey to get randomValue from chainMap
//     const randomValue =
//       this.chainMap.get(randomKey)[
//         this.createRandomNumber(0, this.chainMap.get(randomKey).length)
//       ];

//     //TODO is it okay to remove '&& randomText.split(" ").length < numWords'?
//     //I believe I needed this second evaluation since I had change the length of randomText already.
//     //
//     if (randomValue !== null && randomText.split(" ").length < numWords) {
//       randomText += " " + randomValue;
//     }
//   }
//   return randomText;
// }

// Keeping previous version of makeChains() for future comparison purpose.
// makeChains() {
//   // add each word in this.words as a key in chainMap
//   this.words.forEach((e) => {
//     this.chainMap.set(e);
//   });

//   // keyValues temporarily stores an array of string characters that become the value for each key in chainMap
//   let keyValues = [];

//   /** Description of algorithm used to build the chain:
//    *  For each key in chainMap, add an array (keyValues) of values.
//    * The array consists of the word that immediately follows a key in this.words.
//    * For example, if a key is "apple", while loop below will search
//    * for ALL instances of "apple" in this.words and push to keyValues the word immediately
//    * following each "apple" instance.
//    */

//   this.chainMap.forEach((value, key) => {
//     let currentWord = key;
//     let currentIndex = this.words.indexOf(currentWord);

//     while (currentIndex >= 0) {
//       // Get the word following currentWord and push to keyValues array
//       const nextWord = this.words[currentIndex + 1];
//       if (nextWord !== undefined) {
//         keyValues.push(nextWord);
//       } else {
//         // An instance of chainMap will contain only one keyValue that equates to null.
//         keyValues.push(null);
//       }
//       // Get the index of the next instance of currentWord inside this.words, IF that word has another instance.
//       currentIndex++;
//       currentIndex = this.words.indexOf(currentWord, currentIndex);
//     }
//     this.chainMap.set(key, keyValues);
//     keyValues = [];
//   });
// }
