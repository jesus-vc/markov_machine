// Textual markov chain generator

export class MarkovMachine {
  // Build markov machine; read in text.
  constructor(text) {
    const regex = /[ \r\n?"“‘”()_,:!;.]+/g;
    const tempWords = text.split(regex);

    // Create a new array of words with special characters removed.
    this.words = tempWords.filter((c) => c !== regex);
    this.makeChains();
  }

  createRandomNumber(array) {
    return array[Math.floor(Math.random() * array.length)];
  }

  makeChains() {
    //Create Markov chains from string input (this.words.).
    // For example, for the text of "the cat in the hat", the chains will be
    // {"the": ["cat", "hat"],
    // "cat": ["in"],
    // "in": ["the"],
    // "hat": [null]} */

    const tempMap = new Map();
    for (let i = 0; i < this.words.length; i++) {
      let word = this.words[i];
      let nextWord = this.words[i + 1] || null;

      if (tempMap.has(word)) {
        tempMap.get(word).push(nextWord);
      } else {
        tempMap.set(word, [nextWord]);
      }
    }
    this.chainMap = tempMap;
  }

  /** Return random text from chains
   * Random text is generated by adding a random key, followed by a random value from that key.
   * Cycle is repeated until count reaches numsWord, OR a random value === null.
   */
  makeText(numWords = 100) {
    const randomText = [];

    // Get first random key from chainMap.
    let mapKeys = [...this.chainMap.keys()];
    let randomKey = this.createRandomNumber(mapKeys);

    // Get subsequent random keys
    while (randomText.length < numWords && randomKey !== null) {
      randomText.push(randomKey);

      let valueKeys = this.chainMap.get(randomKey);
      randomKey = this.createRandomNumber(valueKeys);
    }
    return randomText.join(" ");
  }
}
